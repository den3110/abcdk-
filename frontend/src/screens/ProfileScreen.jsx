import { useEffect, useMemo, useRef, useState } from "react";
import {
  Alert,
  Box,
  Button,
  CircularProgress,
  Container,
  FormControl,
  InputLabel,
  MenuItem,
  Paper,
  Select,
  Snackbar,
  Stack,
  TextField,
  Typography,
  Chip,
} from "@mui/material";
// import { useDispatch, useSelector } from "react-redux";
import {
  useGetProfileQuery,
  useUpdateUserMutation,
} from "../slices/usersApiSlice";
import { useUploadCccdMutation } from "../slices/uploadApiSlice";
import CccdDropzone from "../components/CccdDropzone";

/* ---------- Danh s√°ch t·ªânh ---------- */
const PROVINCES = [
  "An Giang",
  "B√† R·ªãa-V≈©ng T√†u",
  "B·∫°c Li√™u",
  "B·∫Øc Giang",
  "B·∫Øc K·∫°n",
  "B·∫Øc Ninh",
  "B·∫øn Tre",
  "B√¨nh D∆∞∆°ng",
  "B√¨nh ƒê·ªãnh",
  "B√¨nh Ph∆∞·ªõc",
  "B√¨nh Thu·∫≠n",
  "C√† Mau",
  "Cao B·∫±ng",
  "C·∫ßn Th∆°",
  "ƒê√† N·∫µng",
  "ƒê·∫Øk L·∫Øk",
  "ƒê·∫Øk N√¥ng",
  "ƒêi·ªán Bi√™n",
  "ƒê·ªìng Nai",
  "ƒê·ªìng Th√°p",
  "Gia Lai",
  "H√† Giang",
  "H√† Nam",
  "H√† N·ªôi",
  "H√† Tƒ©nh",
  "H·∫£i D∆∞∆°ng",
  "H·∫£i Ph√≤ng",
  "H·∫≠u Giang",
  "H√≤a B√¨nh",
  "H∆∞ng Y√™n",
  "Kh√°nh H√≤a",
  "Ki√™n Giang",
  "Kon Tum",
  "Lai Ch√¢u",
  "L√¢m ƒê·ªìng",
  "L·∫°ng S∆°n",
  "L√†o Cai",
  "Long An",
  "Nam ƒê·ªãnh",
  "Ngh·ªá An",
  "Ninh B√¨nh",
  "Ninh Thu·∫≠n",
  "Ph√∫ Th·ªç",
  "Ph√∫ Y√™n",
  "Qu·∫£ng B√¨nh",
  "Qu·∫£ng Nam",
  "Qu·∫£ng Ng√£i",
  "Qu·∫£ng Ninh",
  "Qu·∫£ng Tr·ªã",
  "S√≥c TrƒÉng",
  "S∆°n La",
  "T√¢y Ninh",
  "Th√°i B√¨nh",
  "Th√°i Nguy√™n",
  "Thanh H√≥a",
  "Th·ª´a Thi√™n Hu·∫ø",
  "Ti·ªÅn Giang",
  "TP H·ªì Ch√≠ Minh",
  "Tr√† Vinh",
  "Tuy√™n Quang",
  "Vƒ©nh Long",
  "Vƒ©nh Ph√∫c",
  "Y√™n B√°i",
];

/* ---------- Gender options (enum m·ªõi) ---------- */
const GENDER_OPTIONS = [
  { value: "unspecified", label: "--" },
  { value: "male", label: "Nam" },
  { value: "female", label: "N·ªØ" },
  { value: "other", label: "Kh√°c" },
];

/* ---------- Form g·ªëc ---------- */
const EMPTY = {
  name: "",
  nickname: "",
  phone: "",
  dob: "",
  province: "",
  cccd: "",
  email: "",
  password: "",
  confirmPassword: "",
  gender: "unspecified", // ‚¨ÖÔ∏è th√™m
};

export default function ProfileScreen() {
  const { data: user, isLoading: fetching, refetch } = useGetProfileQuery();

  const [form, setForm] = useState(EMPTY);
  const [touched, setTouched] = useState({});
  const [errors, setErrors] = useState({});
  const [snack, setSnack] = useState({ open: false, type: "success", msg: "" });
  const initialRef = useRef(EMPTY);

  const [updateProfile, { isLoading }] = useUpdateUserMutation();
  const [uploadCccd, { isLoading: upLoad }] = useUploadCccdMutation();

  const [frontImg, setFrontImg] = useState(null);
  const [backImg, setBackImg] = useState(null);

  /* Prefill khi user ƒë·∫øn */
  useEffect(() => {
    if (!user) return;
    const init = {
      name: user.name || "",
      nickname: user.nickname || "",
      phone: user.phone || "",
      dob: user.dob ? user.dob.slice(0, 10) : "",
      province: user.province || "",
      cccd: user.cccd || "",
      email: user.email || "",
      password: "",
      confirmPassword: "",
      gender: user.gender || "unspecified", // ‚¨ÖÔ∏è th√™m
    };
    initialRef.current = init;
    setForm(init);
  }, [user]);

  /* Validate */
  const validate = (d) => {
    const e = {};
    if (!d.name.trim()) e.name = "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng";
    else if (d.name.trim().length < 2) e.name = "T·ªëi thi·ªÉu 2 k√Ω t·ª±";
    if (!d.nickname.trim()) e.nickname = "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng";
    else if (d.nickname.trim().length < 2) e.nickname = "T·ªëi thi·ªÉu 2 k√Ω t·ª±";
    if (!/^0\d{9}$/.test(d.phone.trim())) e.phone = "Sai ƒë·ªãnh d·∫°ng (10 ch·ªØ s·ªë)";
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(d.email.trim()))
      e.email = "Email kh√¥ng h·ª£p l·ªá";
    if (d.dob) {
      const day = new Date(d.dob);
      if (Number.isNaN(day)) e.dob = "Ng√†y sinh kh√¥ng h·ª£p l·ªá";
      else if (day > new Date()) e.dob = "Kh√¥ng ƒë∆∞·ª£c ·ªü t∆∞∆°ng lai";
    }
    if (!d.province) e.province = "B·∫Øt bu·ªôc";
    if (d.cccd && !/^\d{12}$/.test(d.cccd.trim()))
      e.cccd = "CCCD ph·∫£i ƒë·ªß 12 s·ªë";
    if (d.password) {
      if (d.password.length < 6) e.password = "T·ªëi thi·ªÉu 6 k√Ω t·ª±";
      if (d.password !== d.confirmPassword) e.confirmPassword = "Kh√¥ng kh·ªõp";
    }
    // ‚úÖ validate gender theo enum
    if (!["male", "female", "unspecified", "other"].includes(d.gender)) {
      e.gender = "Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá";
    }
    return e;
  };
  useEffect(() => setErrors(validate(form)), [form]);

  const isDirty = useMemo(
    () =>
      Object.keys(form).some(
        (k) => k !== "confirmPassword" && form[k] !== initialRef.current[k]
      ),
    [form]
  );
  const isValid = useMemo(() => !Object.keys(errors).length, [errors]);

  /* Helpers */
  const showErr = (f) => touched[f] && !!errors[f];
  const onChange = (e) =>
    setForm((p) => ({ ...p, [e.target.name]: e.target.value }));
  const onBlur = (e) => setTouched((t) => ({ ...t, [e.target.name]: true }));

  /* Diff payload */
  const diff = () => {
    const out = { _id: user._id };
    for (const k in form) {
      if (k === "confirmPassword") continue;
      if (form[k] !== initialRef.current[k]) out[k] = form[k];
    }
    return out;
  };

  /* Submit profile */
  const submit = async (e) => {
    e.preventDefault();
    setTouched(Object.fromEntries(Object.keys(form).map((k) => [k, true])));
    const errs = validate(form);
    setErrors(errs);
    if (Object.keys(errs).length)
      return setSnack({ open: true, type: "error", msg: "Ki·ªÉm tra l·∫°i!" });
    if (!isDirty)
      return setSnack({ open: true, type: "info", msg: "Ch∆∞a thay ƒë·ªïi" });

    try {
      await updateProfile(diff()).unwrap();
      await refetch();
      setTouched({});
      setSnack({ open: true, type: "success", msg: "ƒê√£ l∆∞u th√†nh c√¥ng" });
    } catch (err) {
      setSnack({
        open: true,
        type: "error",
        msg: err?.data?.message || err?.error || "C·∫≠p nh·∫≠t th·∫•t b·∫°i",
      });
    }
  };

  /* Upload CCCD */
  const sendCccd = async () => {
    if (!frontImg || !backImg || upLoad) return;
    const fd = new FormData();
    fd.append("front", frontImg);
    fd.append("back", backImg);
    try {
      await uploadCccd(fd).unwrap();
      setFrontImg(null);
      setBackImg(null);
      await refetch();
      setSnack({ open: true, type: "success", msg: "ƒê√£ g·ª≠i, ch·ªù x√°c minh" });
    } catch (err) {
      setSnack({
        open: true,
        type: "error",
        msg: err?.data?.message || "Upload th·∫•t b·∫°i",
      });
    }
  };

  if (fetching || !user)
    return (
      <Box sx={{ display: "flex", justifyContent: "center", mt: 10 }}>
        <CircularProgress />
      </Box>
    );

  const status = user.cccdStatus || "unverified";
  const showUpload = status === "unverified" || status === "rejected";
  const frontUrl = user.cccdImages?.front || "";
  const backUrl = user.cccdImages?.back || "";

  return (
    <Container maxWidth="sm" sx={{ py: 4 }}>
      <Paper elevation={2} sx={{ p: 3 }}>
        <Typography variant="h6" fontWeight={700} mb={2}>
          C·∫≠p nh·∫≠t h·ªì s∆°
        </Typography>

        <Box component="form" onSubmit={submit} noValidate>
          <Stack spacing={2}>
            {/* ------ Th√¥ng tin c√° nh√¢n ------ */}
            <TextField
              label="H·ªç v√† t√™n"
              name="name"
              value={form.name}
              onChange={onChange}
              onBlur={onBlur}
              required
              fullWidth
              error={showErr("name")}
              helperText={showErr("name") ? errors.name : " "}
            />
            <TextField
              label="Bi·ªát danh"
              name="nickname"
              value={form.nickname}
              onChange={onChange}
              onBlur={onBlur}
              required
              fullWidth
              error={showErr("nickname")}
              helperText={showErr("nickname") ? errors.nickname : " "}
            />
            <TextField
              label="S·ªë ƒëi·ªán tho·∫°i"
              name="phone"
              value={form.phone}
              onChange={onChange}
              onBlur={onBlur}
              required
              fullWidth
              inputProps={{ inputMode: "numeric", pattern: "0\\d{9}" }}
              error={showErr("phone")}
              helperText={showErr("phone") ? errors.phone : " "}
            />

            {/* üîπ Gi·ªõi t√≠nh */}
            <FormControl fullWidth error={showErr("gender")}>
              <InputLabel id="gender-lbl" shrink>
                Gi·ªõi t√≠nh
              </InputLabel>
              <Select
                labelId="gender-lbl"
                label="Gi·ªõi t√≠nh"
                name="gender"
                value={form.gender}
                onChange={onChange}
                onBlur={onBlur}
                displayEmpty
              >
                {GENDER_OPTIONS.map((opt) => (
                  <MenuItem key={opt.value} value={opt.value}>
                    {opt.label}
                  </MenuItem>
                ))}
              </Select>
              {showErr("gender") && (
                <Typography variant="caption" color="error">
                  {errors.gender}
                </Typography>
              )}
            </FormControl>

            <TextField
              label="Ng√†y sinh"
              type="date"
              name="dob"
              value={form.dob}
              onChange={onChange}
              onBlur={onBlur}
              fullWidth
              InputLabelProps={{ shrink: true }}
              error={showErr("dob")}
              helperText={showErr("dob") ? errors.dob : " "}
            />
            <FormControl fullWidth required error={showErr("province")}>
              <InputLabel id="province-lbl" shrink>
                T·ªânh / Th√†nh ph·ªë
              </InputLabel>
              <Select
                labelId="province-lbl"
                label="T·ªânh / Th√†nh ph·ªë"
                name="province"
                value={form.province}
                onChange={onChange}
                onBlur={onBlur}
                displayEmpty
              >
                <MenuItem value="">
                  <em>-- Ch·ªçn --</em>
                </MenuItem>
                {PROVINCES.map((p) => (
                  <MenuItem key={p} value={p}>
                    {p}
                  </MenuItem>
                ))}
              </Select>
              {showErr("province") && (
                <Typography variant="caption" color="error">
                  {errors.province}
                </Typography>
              )}
            </FormControl>
            <TextField
              label="M√£ ƒë·ªãnh danh CCCD"
              name="cccd"
              value={form.cccd}
              onChange={onChange}
              onBlur={onBlur}
              fullWidth
              placeholder="12 ch·ªØ s·ªë"
              inputProps={{ inputMode: "numeric", maxLength: 12 }}
              error={showErr("cccd")}
              helperText={showErr("cccd") ? errors.cccd : " "}
            />
            <TextField
              label="Email"
              type="email"
              name="email"
              value={form.email}
              onChange={onChange}
              onBlur={onBlur}
              required
              fullWidth
              error={showErr("email")}
              helperText={showErr("email") ? errors.email : " "}
            />
            <TextField
              label="M·∫≠t kh·∫©u m·ªõi"
              type="password"
              name="password"
              value={form.password}
              onChange={onChange}
              onBlur={onBlur}
              fullWidth
              placeholder="ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng ƒë·ªïi"
              error={showErr("password")}
              helperText={showErr("password") ? errors.password : " "}
            />
            <TextField
              label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
              type="password"
              name="confirmPassword"
              value={form.confirmPassword}
              onChange={onChange}
              onBlur={onBlur}
              fullWidth
              error={showErr("confirmPassword")}
              helperText={
                showErr("confirmPassword") ? errors.confirmPassword : " "
              }
            />

            {/* ------ Upload / Preview CCCD ------ */}
            <Typography variant="subtitle1" fontWeight={600} mt={1}>
              ·∫¢nh CCCD
            </Typography>
            {showUpload ? (
              <>
                <Stack direction={{ xs: "column", sm: "row" }} spacing={2}>
                  <CccdDropzone
                    label="M·∫∑t tr∆∞·ªõc"
                    file={frontImg}
                    onFile={setFrontImg}
                  />
                  <CccdDropzone
                    label="M·∫∑t sau"
                    file={backImg}
                    onFile={setBackImg}
                  />
                </Stack>
                <Button
                  variant="outlined"
                  disabled={!frontImg || !backImg || upLoad}
                  startIcon={upLoad && <CircularProgress size={20} />}
                  onClick={sendCccd}
                >
                  {upLoad ? "ƒêang g·ª≠i‚Ä¶" : "G·ª≠i ·∫£nh x√°c minh"}
                </Button>
              </>
            ) : (
              <Stack direction={{ xs: "column", sm: "row" }} spacing={2}>
                <Box sx={{ flex: 1, minWidth: 0 }}>
                  <img
                    src={frontUrl}
                    alt="front"
                    style={{
                      width: "100%",
                      maxHeight: 160,
                      objectFit: "contain",
                      borderRadius: 8,
                    }}
                  />
                  <Typography align="center" variant="caption">
                    M·∫∑t tr∆∞·ªõc
                  </Typography>
                </Box>
                <Box sx={{ flex: 1, minWidth: 0 }}>
                  <img
                    src={backUrl}
                    alt="back"
                    style={{
                      width: "100%",
                      maxHeight: 160,
                      objectFit: "contain",
                      borderRadius: 8,
                    }}
                  />
                  <Typography align="center" variant="caption">
                    M·∫∑t sau
                  </Typography>
                </Box>
              </Stack>
            )}

            {/* Tr·∫°ng th√°i */}
            <Stack direction="row" spacing={1} alignItems="center">
              <Typography variant="body2">Tr·∫°ng th√°i:</Typography>
              <Chip
                size="small"
                color={
                  status === "verified"
                    ? "success"
                    : status === "pending"
                    ? "warning"
                    : status === "rejected"
                    ? "error"
                    : "default"
                }
                label={
                  {
                    unverified: "Ch∆∞a x√°c nh·∫≠n",
                    pending: "Ch·ªù x√°c nh·∫≠n",
                    verified: "ƒê√£ x√°c nh·∫≠n",
                    rejected: "B·ªã t·ª´ ch·ªëi",
                  }[status]
                }
              />
            </Stack>

            {/* ------ L∆∞u thay ƒë·ªïi ------ */}
            <Button
              type="submit"
              variant="contained"
              disabled={!isDirty || !isValid || isLoading}
              startIcon={isLoading && <CircularProgress size={20} />}
            >
              {isLoading ? "ƒêang l∆∞u..." : "L∆∞u thay ƒë·ªïi"}
            </Button>
          </Stack>
        </Box>
      </Paper>

      {/* Snackbar */}
      <Snackbar
        open={snack.open}
        autoHideDuration={3000}
        onClose={() => setSnack((s) => ({ ...s, open: false }))}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert
          severity={snack.type}
          variant="filled"
          onClose={() => setSnack((s) => ({ ...s, open: false }))}
        >
          {snack.msg}
        </Alert>
      </Snackbar>
    </Container>
  );
}
