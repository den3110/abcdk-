// src/pages/LevelPointPage.jsx
import React, { useState, useMemo } from "react";
import {
  Container,
  Box,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Select,
  FormControl,
  Button,
  Chip,
  Stack,
  Card,
  CardContent,
  CardHeader,
  Typography,
  useTheme,
  useMediaQuery,
  MenuItem,
} from "@mui/material";
import { useSelector } from "react-redux";
import { toast } from "react-toastify";
import { useCreateAssessmentMutation } from "../../slices/assessmentsApiSlice";

/**
 * B·∫£ng c·∫•u h√¨nh k·ªπ nƒÉng & tr·ªçng s·ªë ‚Äì t·ªïng weight = 1.0
 * (B·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh cho kh·ªõp backend)
 */
const SKILLS = [
  {
    id: 1,
    name: "Forehand (Thu·∫≠n tay)",
    explain:
      "‚Ä¢ ƒêi·ªÅu khi·ªÉn c√∫ ƒë√°nh (ƒë·ªô s√¢u, h∆∞·ªõng, xo√°y)\n‚Ä¢ Kh·∫£ nƒÉng ƒë√°nh nhanh & ch√≠nh x√°c\n‚Ä¢ D√πng trong c·∫£ t·∫•n c√¥ng & ph√≤ng th·ªß",
    weight: 0.15,
  },
  {
    id: 2,
    name: "Backhand (Tr√°i tay)",
    explain:
      "‚Ä¢ ƒê√°nh tr√°i tay ·ªïn ƒë·ªãnh\n‚Ä¢ ƒêi·ªÅu khi·ªÉn t·ªëc ƒë·ªô, ƒë·ªô s√¢u, xo√°y\n‚Ä¢ Gi·∫£m l·ªói kh√¥ng c·∫ßn thi·∫øt",
    weight: 0.1,
  },
  {
    id: 3,
    name: "Serve / Return (Giao ‚Äì Tr·∫£)",
    explain:
      "‚Ä¢ ƒê·ªô ch√≠nh x√°c & ƒëa d·∫°ng\n‚Ä¢ T·∫°o l·ª£i th·∫ø ƒë·∫ßu pha b√≥ng\n‚Ä¢ Thay ƒë·ªïi t·ªëc ƒë·ªô & xo√°y",
    weight: 0.15,
  },
  {
    id: 4,
    name: "Dink (ƒê√°nh nh·∫π)",
    explain:
      "‚Ä¢ Ki·ªÉm so√°t b√≥ng ·ªü NVZ\n‚Ä¢ Ki√™n nh·∫´n trong pha b√≥ng ch·∫≠m\n‚Ä¢ T·∫°o c∆° h·ªôi t·∫•n c√¥ng",
    weight: 0.2,
  },
  {
    id: 5,
    name: "3rd Shot (C√∫ th·ª© 3)",
    explain:
      "‚Ä¢ ƒê·ªô ch√≠nh x√°c, xo√°y, ƒë·ªô s√¢u\n‚Ä¢ T·∫°o th·∫ø t·∫•n c√¥ng\n‚Ä¢ ƒê·∫©y ƒë·ªëi th·ªß kh·ªèi v·ªã tr√≠ thu·∫≠n",
    weight: 0.15,
  },
  {
    id: 6,
    name: "Volley (V√¥-l√™)",
    explain:
      "‚Ä¢ V√¥-l√™ ch√≠nh x√°c ·ªïn ƒë·ªãnh\n‚Ä¢ ƒêi·ªÅu khi·ªÉn h∆∞·ªõng √©p ƒë·ªëi th·ªß\n‚Ä¢ Ph·∫£n x·∫° nhanh khu v·ª±c NVZ",
    weight: 0.15,
  },
  {
    id: 7,
    name: "Strategy (Chi·∫øn thu·∫≠t)",
    explain:
      "‚Ä¢ Di chuy·ªÉn & ph·ªëi h·ª£p v·ªõi ƒë·ªìng ƒë·ªôi\n‚Ä¢ Khai th√°c ƒëi·ªÉm y·∫øu ƒë·ªëi th·ªß\n‚Ä¢ Ra quy·∫øt ƒë·ªãnh h·ª£p l√Ω",
    weight: 0.1,
  },
  // C√°c y·∫øu t·ªë th√¥ng tin th√™m, weight = 0 ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng Level
  {
    id: 8,
    name: "T·∫ßn su·∫•t ch∆°i",
    explain:
      "H√†ng ng√†y 5 | H√†ng tu·∫ßn 4 | H√†ng th√°ng 3 | H√†ng nƒÉm 2 | V√†i nƒÉm 1",
    weight: 0.0,
  },
  {
    id: 9,
    name: "ƒê·∫•u gi·∫£i",
    explain: "ƒê√£ t·ª´ng tham gia gi·∫£i ƒë·∫•u ch∆∞a? (C√≥ 1 | Ch∆∞a 0)",
    weight: 0.0,
  },
  {
    id: 10,
    name: "ƒêi·ªÉm h·ªá th·ªëng kh√°c",
    explain: "UTR-P / DUPR / VNPickleball ‚Ä¶ (quy ƒë·ªïi thang 10)",
    weight: 0.0,
  },
];

const SCORE_OPTIONS = Array.from({ length: 11 }).map((_, i) => i); // 0..10
const FREQ_OPTIONS = [0, 1, 2, 3, 4, 5];
const YES_NO_OPTIONS = [0, 1];

// H·ªá s·ªë quy ƒë·ªïi -> Level ~ (Œ£ value*weight)/MAP_FACTOR
const MAP_FACTOR = 1.9;

export default function LevelPointPage({ userId: userIdProp }) {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));
  const authedId = useSelector((s) => s?.auth?.userInfo?._id);
  const userId = userIdProp || authedId; // ∆∞u ti√™n prop, fallback l·∫•y t·ª´ auth

  const [createAssessment, { isLoading }] = useCreateAssessmentMutation();

  // [{ single, double }]
  const [values, setValues] = useState(
    SKILLS.map(() => ({ single: 0, double: 0 }))
  );

  const weightsSum = useMemo(
    () => SKILLS.reduce((acc, s) => acc + (s.weight || 0), 0),
    []
  );

  const { sumSingle, sumDouble, singleLevel, doubleLevel } = useMemo(() => {
    const single = values.reduce(
      (acc, v, idx) => acc + v.single * (SKILLS[idx].weight || 0),
      0
    );
    const dbl = values.reduce(
      (acc, v, idx) => acc + v.double * (SKILLS[idx].weight || 0),
      0
    );
    return {
      sumSingle: single,
      sumDouble: dbl,
      singleLevel: (single / MAP_FACTOR).toFixed(1),
      doubleLevel: (dbl / MAP_FACTOR).toFixed(1),
    };
  }, [values]);

  const handleSelect = (rowIdx, field) => (e) => {
    setValues((prev) => {
      const next = [...prev];
      next[rowIdx] = { ...next[rowIdx], [field]: Number(e.target.value) };
      return next;
    });
  };

  const validateBeforeSubmit = () => {
    if (!userId) {
      toast.error("Thi·∫øu userId. Vui l√≤ng ƒëƒÉng nh·∫≠p ho·∫∑c cung c·∫•p userId.");
      return false;
    }
    if (Math.abs(weightsSum - 1) > 1e-6) {
      toast.error(
        `T·ªïng tr·ªçng s·ªë = ${weightsSum.toFixed(
          2
        )} ‚â† 1.0. H√£y ƒëi·ªÅu ch·ªânh c·∫•u h√¨nh SKILLS.`
      );
      return false;
    }
    const allZero = values.every((v) => v.single === 0 && v.double === 0);
    if (allZero) {
      toast("B·∫°n ch∆∞a nh·∫≠p ƒëi·ªÉm n√†o, v·∫´n ti·∫øp t·ª•c g·ª≠i?", {
        icon: "ü§î",
      });
      // Kh√¥ng ch·∫∑n g·ª≠i, ch·ªâ c·∫£nh b√°o.
    }
    return true;
  };

  const handleSubmit = async () => {
    if (!validateBeforeSubmit()) return;

    const items = values.map((v, i) => ({
      skillId: SKILLS[i].id,
      single: v.single,
      double: v.double,
      weight: SKILLS[i].weight, // ƒë·ªÉ backend d·ªÖ ki·ªÉm ch·ª©ng
    }));

    const payload = {
      items,
      metrics: {
        sumSingle,
        sumDouble,
        singleLevel: Number(singleLevel),
        doubleLevel: Number(doubleLevel),
        mapFactor: MAP_FACTOR,
      },
      note: "", // c√≥ th·ªÉ cho ng∆∞·ªùi ch·∫•m nh·∫≠p ghi ch√∫ ri√™ng
    };

    // const tId = toast.loading("ƒêang l∆∞u ƒë√°nh gi√°‚Ä¶", {});
    try {
      await createAssessment({
        userId,
        items: payload.items,
        note: payload.note,
      }).unwrap();
      toast.success("ƒê√£ l∆∞u ƒë√°nh gi√° & c·∫≠p nh·∫≠t ranking!");
    } catch (err) {
      const msg =
        err?.data?.message ||
        err?.error ||
        "L·ªói kh√¥ng x√°c ƒë·ªãnh khi l∆∞u ƒë√°nh gi√°.";
      toast.error(msg);
    }
  };

  const renderSelectMenu = (skillId, value, onChange) => {
    const source =
      skillId === 8
        ? FREQ_OPTIONS
        : skillId === 9
        ? YES_NO_OPTIONS
        : SCORE_OPTIONS;
    return (
      <Select value={value} onChange={onChange} size="small">
        {source.map((n) => (
          <MenuItem key={n} value={n}>
            {n}
          </MenuItem>
        ))}
      </Select>
    );
  };

  return (
    <Box className="min-h-screen bg-gray-50">
      <Container maxWidth="lg" sx={{ py: 4 }}>
        <Stack
          direction={{ xs: "column", sm: "row" }}
          justifyContent="space-between"
          alignItems={{ xs: "flex-start", sm: "center" }}
          spacing={1}
          mb={2}
        >
          <Typography variant="h4">
            B·∫£ng ch·∫•m ƒëi·ªÉm tr√¨nh m√¥n Pickleball
          </Typography>
          <Chip
            label={`T·ªïng tr·ªçng s·ªë: ${weightsSum.toFixed(2)}`}
            color={Math.abs(weightsSum - 1) < 1e-6 ? "success" : "warning"}
            variant="outlined"
          />
        </Stack>

        {/* BODY ‚Äì B·∫£ng (desktop) ho·∫∑c Card list (mobile) */}
        {isMobile ? (
          <Stack spacing={2}>
            {SKILLS.map((s, idx) => (
              <Card key={s.id} variant="outlined">
                <CardHeader title={s.name} sx={{ pb: 0 }} />
                <CardContent>
                  <Typography
                    variant="body2"
                    sx={{ whiteSpace: "pre-line" }}
                    gutterBottom
                  >
                    {s.explain}
                  </Typography>

                  <Stack direction="row" spacing={2}>
                    <FormControl fullWidth>
                      {renderSelectMenu(
                        s.id,
                        values[idx].single,
                        handleSelect(idx, "single")
                      )}
                      <Typography
                        variant="caption"
                        color="text.secondary"
                        mt={0.5}
                      >
                        ƒêi·ªÉm ƒë∆°n
                      </Typography>
                    </FormControl>

                    <FormControl fullWidth>
                      {renderSelectMenu(
                        s.id,
                        values[idx].double,
                        handleSelect(idx, "double")
                      )}
                      <Typography
                        variant="caption"
                        color="text.secondary"
                        mt={0.5}
                      >
                        ƒêi·ªÉm ƒë√¥i
                      </Typography>
                    </FormControl>
                  </Stack>
                </CardContent>
              </Card>
            ))}
          </Stack>
        ) : (
          <Box sx={{ overflowX: "auto" }}>
            <Table size="small" sx={{ minWidth: 820 }}>
              <TableHead>
                <TableRow>
                  <TableCell style={{ fontWeight: 700 }}>K·ªπ nƒÉng</TableCell>
                  <TableCell style={{ fontWeight: 700 }}>
                    Ti√™u ch√≠ ƒë√°nh gi√°
                  </TableCell>
                  <TableCell align="center" style={{ fontWeight: 700 }}>
                    ƒêi·ªÉm ƒë∆°n
                  </TableCell>
                  <TableCell align="center" style={{ fontWeight: 700 }}>
                    ƒêi·ªÉm ƒë√¥i
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {SKILLS.map((s, idx) => (
                  <TableRow key={s.id} hover>
                    <TableCell>{s.name}</TableCell>
                    <TableCell sx={{ whiteSpace: "pre-line" }}>
                      {s.explain}
                    </TableCell>
                    <TableCell align="center" sx={{ width: 160 }}>
                      <FormControl fullWidth>
                        {renderSelectMenu(
                          s.id,
                          values[idx].single,
                          handleSelect(idx, "single")
                        )}
                      </FormControl>
                    </TableCell>
                    <TableCell align="center" sx={{ width: 160 }}>
                      <FormControl fullWidth>
                        {renderSelectMenu(
                          s.id,
                          values[idx].double,
                          handleSelect(idx, "double")
                        )}
                      </FormControl>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </Box>
        )}

        {/* FOOTER ‚Äì hi·ªÉn th·ªã ƒëi·ªÉm & n√∫t g·ª≠i */}
        <Box mt={4}>
          <Card
            elevation={3}
            sx={{ px: { xs: 2, sm: 3 }, py: { xs: 2, sm: 3 }, borderRadius: 3 }}
          >
            <CardContent>
              <Stack
                direction={{ xs: "column", sm: "row" }}
                spacing={3}
                justifyContent={{ xs: "center", sm: "space-between" }}
                alignItems={{ xs: "stretch", sm: "center" }}
              >
                <Stack spacing={1} sx={{ minWidth: 220 }}>
                  <Button
                    variant="contained"
                    size="large"
                    fullWidth
                    onClick={handleSubmit}
                    disabled={isLoading}
                    sx={{ minWidth: { sm: 160 } }}
                  >
                    {isLoading ? "ƒêang c·∫≠p nh·∫≠t‚Ä¶" : "C·∫≠p nh·∫≠t"}
                  </Button>
                  {!userId && (
                    <Typography variant="caption" color="error.main">
                      * Ch∆∞a x√°c ƒë·ªãnh ng∆∞·ªùi d√πng ‚Äì kh√¥ng th·ªÉ l∆∞u
                    </Typography>
                  )}
                </Stack>

                <Stack
                  direction="row"
                  spacing={1}
                  justifyContent={{ xs: "center", sm: "flex-end" }}
                  flexWrap="wrap"
                  rowGap={1}
                >
                  <Chip
                    label={`Tr√¨nh ƒë∆°n: ${singleLevel}`}
                    color="primary"
                    sx={{
                      fontSize: "1rem",
                      px: 2,
                      py: 1,
                      mb: { xs: 1, sm: 0 },
                    }}
                  />
                  <Chip
                    label={`Tr√¨nh ƒë√¥i: ${doubleLevel}`}
                    color="success"
                    sx={{ fontSize: "1rem", px: 2, py: 1 }}
                  />
                </Stack>
              </Stack>
            </CardContent>
          </Card>
        </Box>

        <Typography
          variant="caption"
          color="text.secondary"
          display="block"
          mt={4}
        >
          * C√¥ng th·ª©c quy ƒë·ªïi tr√¨nh c√≥ th·ªÉ c·∫ßn ƒë·ªìng b·ªô v·ªõi backend. ƒêi·ªÅu ch·ªânh ·ªü{" "}
          <code>MAP_FACTOR</code>. C√°c y·∫øu t·ªë ‚ÄúT·∫ßn su·∫•t ch∆°i / ƒê·∫•u gi·∫£i / ƒêi·ªÉm
          h·ªá th·ªëng kh√°c‚Äù hi·ªán kh√¥ng ·∫£nh h∆∞·ªüng Level (weight = 0) ‚Äì v·∫´n ƒë∆∞·ª£c l∆∞u
          trong items ƒë·ªÉ tham kh·∫£o.
        </Typography>
      </Container>
    </Box>
  );
}
