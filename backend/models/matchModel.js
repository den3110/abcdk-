// models/Match.js
import mongoose from "mongoose";

const matchSchema = new mongoose.Schema(
  {
    tournament: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Tournament",
      required: true,
    },
    bracket: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Bracket",
      required: true,
    },

    round: { type: Number, default: 1 },
    order: { type: Number, default: 0 },

    // Optional: m√£ tr·∫≠n tu·ª≥ √Ω (n·∫øu kh√¥ng c√≥, FE c√≥ th·ªÉ t·ª± hi·ªÉn th·ªã M-{round}-{order})
    code: { type: String, default: "" },

    // ‚ùó B·ªè required ƒë·ªÉ cho ph√©p d√πng previousA/previousB
    pairA: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Registration",
      default: null,
    },
    pairB: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Registration",
      default: null,
    },

    // Winner feed-in t·ª´ tr·∫≠n tr∆∞·ªõc
    previousA: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Match",
      default: null,
    },
    previousB: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Match",
      default: null,
    },

    // Lu·∫≠t thi ƒë·∫•u
    rules: {
      bestOf: { type: Number, enum: [1, 3, 5], default: 3 },
      pointsToWin: { type: Number, enum: [11, 15, 21], default: 11 },
      winByTwo: { type: Boolean, default: true },
    },

    // ƒêi·ªÉm t·ª´ng v√°n
    gameScores: [
      { a: { type: Number, default: 0 }, b: { type: Number, default: 0 } },
    ],

    // Tr·∫°ng th√°i c∆° b·∫£n
    status: {
      type: String,
      enum: ["scheduled", "live", "finished"],
      default: "scheduled",
    },
    winner: { type: String, enum: ["A", "B", ""], default: "" },

    referee: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
    note: { type: String, default: "" },

    // Li√™n k·∫øt sang tr·∫≠n ti·∫øp theo
    nextMatch: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Match",
      default: null,
    },
    nextSlot: { type: String, enum: ["A", "B", null], default: null },

    /* ---------- L·ªãch & s√¢n (ƒë√£ d√πng ·ªü c√°c pipeline BE/FE) ---------- */
    scheduledAt: { type: Date, default: null }, // ng√†y/gi·ªù d·ª± ki·∫øn
    court: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Court",
      default: null,
    },
    courtLabel: { type: String, default: "" }, // fallback text khi ch∆∞a c√≥ court

    /* ---------- Tr∆∞·ªùng ph·ª•c v·ª• LIVE realtime (referee ch·∫•m) ---------- */
    currentGame: { type: Number, default: 0 }, // index v√°n hi·ªán t·∫°i
    // ‚úÖ pickleball serving state
    serve: {
      side: { type: String, enum: ["A", "B"], default: "A" }, // ƒë·ªôi ƒëang giao
      server: { type: Number, enum: [1, 2], default: 2 }, // ng∆∞·ªùi th·ª© m·∫•y trong ƒë·ªôi ƒëang giao
    },
    startedAt: { type: Date, default: null },
    finishedAt: { type: Date, default: null },
    liveBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      default: null,
    },
    liveVersion: { type: Number, default: 0 }, // tƒÉng m·ªói l·∫ßn c·∫≠p nh·∫≠t live
    video: { type: String, default: "" },
    liveLog: [
      {
        type: {
          type: String,
          enum: [
            "point",
            "undo",
            "start",
            "finish",
            "forfeit",
            "serve", // üëà th√™m
            "sideout", // üëà n·∫øu b·∫°n c√≥ log side-out
            "rotate", // üëà n·∫øu b·∫°n c√≥ log ƒë·ªïi √¥/ƒë·ªïi ng∆∞·ªùi giao
          ],
          required: true,
        },
        by: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
        payload: { type: mongoose.Schema.Types.Mixed },
        at: { type: Date, default: Date.now },
      },
    ],
  },
  { timestamps: true }
);

/* Y√™u c·∫ßu logic: M·ªói b√™n ph·∫£i c√≥ pair ho·∫∑c previous */
matchSchema.pre("validate", function (next) {
  const okA = !!this.pairA || !!this.previousA;
  const okB = !!this.pairB || !!this.previousB;
  if (!okA) return next(new Error("Either pairA or previousA is required"));
  if (!okB) return next(new Error("Either pairB or previousB is required"));
  next();
});

matchSchema.pre("save", function(next) {
  if (!this.code) {
    const r = this.round ?? "";
    const o = this.order ?? "";
    this.code = `R${r}#${o}`; // gi·ªëng ·∫£nh m·∫´u: V{round}-B{order}
  }
  next();
});

/* Khi tr·∫≠n k·∫øt th√∫c: ƒë·ªï ƒë·ªôi th·∫Øng sang nextMatch[nextSlot] n·∫øu tr·ªëng */
matchSchema.post("save", async function (doc, next) {
  try {
    if (
      doc.status === "finished" &&
      doc.winner &&
      doc.nextMatch &&
      doc.nextSlot
    ) {
      const winnerRegId = doc.winner === "A" ? doc.pairA : doc.pairB;
      if (winnerRegId) {
        const Next = doc.model("Match");
        const nm = await Next.findById(doc.nextMatch);
        if (nm) {
          const field = doc.nextSlot === "A" ? "pairA" : "pairB";
          if (!nm[field]) {
            nm[field] = winnerRegId;
            await nm.save();
          }
        }
      }
    }
    next();
  } catch (e) {
    next(e);
  }
});

/* Sau khi update xong: n·∫øu ƒë√£ finished + c√≥ winner th√¨ feed winner cho c√°c tr·∫≠n ph·ª• thu·ªôc previousA/B */
matchSchema.post("findOneAndUpdate", async function (doc) {
  if (!doc) return;
  try {
    if (doc.status === "finished" && doc.winner) {
      const MatchModel = doc.model("Match"); // ‚úÖ L·∫•y model ƒë√∫ng c√°ch
      const winnerReg = doc.winner === "A" ? doc.pairA : doc.pairB;

      await MatchModel.updateMany(
        { previousA: doc._id },
        { $set: { pairA: winnerReg }, $unset: { previousA: "" } }
      );
      await MatchModel.updateMany(
        { previousB: doc._id },
        { $set: { pairB: winnerReg }, $unset: { previousB: "" } }
      );
    }
  } catch (err) {
    console.error("[Match post(findOneAndUpdate)] propagate error:", err);
  }
});

/* ---------- Indexes ---------- */
matchSchema.index({ tournament: 1, bracket: 1, status: 1, createdAt: -1 });
matchSchema.index({ bracket: 1, createdAt: -1 });
matchSchema.index({ tournament: 1, createdAt: -1 });
matchSchema.index({ scheduledAt: 1 });
matchSchema.index({ court: 1 });
matchSchema.index({ status: 1, finishedAt: -1 });
matchSchema.index({ pairA: 1, status: 1 });
matchSchema.index({ pairB: 1, status: 1 });

export default mongoose.model("Match", matchSchema);
