// server/bot/kycBot.js
import { Telegraf } from "telegraf";
import mongoose from "mongoose";
import User from "../models/userModel.js";
import dotenv from "dotenv";
import { registerKycReviewButtons } from "../services/telegram/telegramNotifyKyc.js";
dotenv.config();

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
// ADMIN_IDS hi·ªán kh√¥ng d√πng n·ªØa (ai c≈©ng d√πng ƒë∆∞·ª£c), nh∆∞ng gi·ªØ l·∫°i n·∫øu sau n√†y c·∫ßn
const ADMIN_IDS = (process.env.TELEGRAM_ADMIN_IDS || "")
  .split(",")
  .map((s) => s.trim())
  .filter(Boolean);

// ===== Utils =====
function isEmail(s = "") {
  return /\S+@\S+\.\S+/.test(s);
}
function isDigits(s = "") {
  return /^\d{6,}$/.test(String(s).replace(/\D/g, "")); // phone >= 6 digits
}
const toPosix = (s = "") => String(s).replace(/\\/g, "/");

function fmtUser(u) {
  const label = {
    unverified: "Ch∆∞a KYC",
    pending: "Ch·ªù KYC",
    verified: "ƒê√£ KYC",
    rejected: "T·ª´ ch·ªëi",
  };
  return [
    `üë§ <b>${u?.name || "‚Äî"}</b>${
      u?.nickname ? " <i>(" + u.nickname + ")</i>" : ""
    }`,
    u?.email ? `‚úâÔ∏è ${u.email}` : "",
    u?.phone ? `üìû ${u.phone}` : "",
    u?.province ? `üìç ${u.province}` : "",
    u?.cccd ? `ü™™ ${u.cccd}` : "",
    `üßæ Tr·∫°ng th√°i: <b>${label[u?.cccdStatus || "unverified"]}</b>`,
    u?.updatedAt
      ? `üïí C·∫≠p nh·∫≠t: ${new Date(u.updatedAt).toLocaleString("vi-VN")}`
      : "",
  ]
    .filter(Boolean)
    .join("\n");
}

// ===== Helpers ·∫£nh: t·ª± fetch r·ªìi g·ª≠i buffer (k√®m fallback) =====
function normalizeImageUrl(rawPath = "") {
  if (!rawPath) return "";
  let s = String(rawPath)
    .trim()
    .replace(/^http:\/\//i, "https://");
  try {
    return new URL(s).toString();
  } catch {
    const host = (process.env.HOST || "").replace(/\/+$/, "");
    if (!host) return "";
    const path = s.startsWith("/") ? s : `/${s}`;
    return `${host}${path}`;
  }
}

async function fetchImageAsBuffer(url) {
  // H·ªó tr·ª£ Node < 18: dynamic import node-fetch n·∫øu thi·∫øu global fetch
  const _fetch =
    typeof fetch === "function" ? fetch : (await import("node-fetch")).default;

  const controller = new AbortController();
  const t = setTimeout(() => controller.abort(), 10_000);
  try {
    const res = await _fetch(url, {
      redirect: "follow",
      signal: controller.signal,
    });
    if (!res.ok)
      throw new Error(`Fetch failed ${res.status} ${res.statusText}`);
    const ctype = res.headers.get("content-type") || "";
    const ab = await res.arrayBuffer();
    const buf = Buffer.from(ab);
    const filename = (() => {
      try {
        const u = new URL(url);
        return u.pathname.split("/").filter(Boolean).pop() || "image.jpg";
      } catch {
        return "image.jpg";
      }
    })();
    return { buffer: buf, contentType: ctype, filename };
  } finally {
    clearTimeout(t);
  }
}

async function sendPhotoSafely(telegram, chatId, url, opts = {}) {
  if (!url) return;
  const { buffer, contentType, filename } = await fetchImageAsBuffer(url);
  const sizeMB = buffer.byteLength / (1024 * 1024);

  // ·∫¢nh l·ªõn > ~10MB ‚Üí g·ª≠i d·∫°ng document
  if (contentType?.startsWith("image/") && sizeMB > 9.9) {
    return telegram.sendDocument(chatId, { source: buffer, filename }, opts);
  }
  try {
    return await telegram.sendPhoto(chatId, { source: buffer, filename }, opts);
  } catch (e) {
    console.warn("sendPhoto failed, fallback to sendDocument:", e?.message);
    return telegram.sendDocument(chatId, { source: buffer, filename }, opts);
  }
}

// ===== T√¨m user theo email/phone/nickname (c√≥ fuzzy cho nickname) =====
async function findUserByQuery(q) {
  const s = (q || "").trim();
  if (!s) return null;
  if (isEmail(s)) return await User.findOne({ email: s }).lean();
  if (isDigits(s)) {
    const phone = s.replace(/\D/g, "");
    return await User.findOne({ phone }).lean();
  }
  let u = await User.findOne({ nickname: s }).lean();
  if (u) return u;
  const rx = new RegExp(s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "i");
  return await User.findOne({ nickname: rx }).lean();
}

// ===== Build n·ªôi dung help (d√πng cho /kyc_command) =====
function buildKycHelp() {
  return [
    "<b>H∆∞·ªõng d·∫´n KYC Bot</b>",
    "",
    "C√°c l·ªánh kh·∫£ d·ª•ng:",
    "‚Ä¢ <code>/kyc_command</code> ‚Äî Danh s√°ch to√†n b·ªô l·ªánh & c√°ch d√πng",
    "‚Ä¢ <code>/start</code> ‚Äî Gi·ªõi thi·ªáu nhanh v√† nh·∫≠n Telegram ID c·ªßa b·∫°n",
    "‚Ä¢ <code>/kyc_status &lt;email|phone|nickname&gt;</code> ‚Äî Tra c·ª©u chi ti·∫øt 1 ng∆∞·ªùi d√πng (k√®m ·∫£nh CCCD n·∫øu c√≥).",
    "‚Ä¢ <code>/kyc_pending [limit]</code> ‚Äî Li·ªát k√™ ng∆∞·ªùi d√πng ƒëang ch·ªù duy·ªát (m·∫∑c ƒë·ªãnh 20, t·ªëi ƒëa 50).",
    "",
    "L∆∞u √Ω:",
    "‚Ä¢ ·∫¢nh CCCD s·∫Ω t·ª± g·ª≠i k√®m n·∫øu t√¨m th·∫•y, bot t·ª± fallback g·ª≠i file n·∫øu g·ª≠i ·∫£nh l·ªói.",
    "‚Ä¢ S·ª≠ d·ª•ng <i>email</i> ho·∫∑c <i>s·ªë ƒëi·ªán tho·∫°i</i> ho·∫∑c <i>nickname</i> ƒë·ªÉ tra c·ª©u.",
  ].join("\n");
}

// =====================================================================

export function initKycBot(app) {
  if (!BOT_TOKEN) {
    console.warn("[kycBot] No TELEGRAM_BOT_TOKEN provided, bot disabled.");
    return null;
  }

  const bot = new Telegraf(BOT_TOKEN);

  // Kh√¥ng ch·∫∑n quy·ªÅn: ai c≈©ng d√πng ƒë∆∞·ª£c t·∫•t c·∫£ l·ªánh
  // (N·∫øu sau n√†y c·∫ßn gi·ªõi h·∫°n, c√≥ th·ªÉ th√™m middleware ki·ªÉm tra ADMIN_IDS)

  // Log callback_query (v√≠ d·ª• b·∫•m n√∫t duy·ªát/t·ª´ ch·ªëi)
  bot.on("callback_query", async (ctx, next) => {
    console.log(
      "[kycBot] callback_query:",
      ctx.callbackQuery?.data,
      "from",
      ctx.from?.id
    );
    return next();
  });

  // ƒêƒÉng k√Ω handler n√∫t Duy·ªát/T·ª´ ch·ªëi
  registerKycReviewButtons(bot, {
    UserModel: User,
    onAfterReview: ({ user, action, reviewer }) => {
      console.log(
        `[kycBot] ${action.toUpperCase()} user=${user?._id} by=${reviewer?.id}`
      );
      // TODO: emit socket/io, audit log...
    },
  });

  // Hi·ªÉn th·ªã l·ªánh trong menu c·ªßa Telegram (kh√¥ng await ƒë·ªÉ gi·ªØ sync)
  bot.telegram
    .setMyCommands([
      { command: "start", description: "Gi·ªõi thi·ªáu & h∆∞·ªõng d·∫´n nhanh" },
      {
        command: "kyc_command",
        description: "Danh s√°ch to√†n b·ªô l·ªánh & c√°ch d√πng",
      },
      {
        command: "kyc_status",
        description: "Tra c·ª©u 1 ng∆∞·ªùi d√πng (email/phone/nickname)",
      },
      { command: "kyc_pending", description: "Danh s√°ch KYC ch·ªù duy·ªát" },
    ])
    .catch((e) => console.warn("setMyCommands failed:", e?.message));

  // /start
  bot.start((ctx) => {
    const uid = ctx.from?.id;
    ctx.reply(
      [
        "Bot KYC ƒë√£ s·∫µn s√†ng.",
        `Your Telegram ID: <code>${uid}</code>`,
        "",
        "G√µ <code>/kyc_command</code> ƒë·ªÉ xem ƒë·∫ßy ƒë·ªß l·ªánh & c√°ch d√πng.",
      ].join("\n"),
      { parse_mode: "HTML" }
    );
  });

  // /kyc_command ‚Äî show to√†n b·ªô l·ªánh & c√°ch d√πng
  bot.command("kyc_command", async (ctx) => {
    try {
      const msg = buildKycHelp();
      await ctx.reply(msg, {
        parse_mode: "HTML",
        disable_web_page_preview: true,
      });
    } catch (e) {
      console.error("kyc_command error:", e);
      await ctx.reply("C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã h∆∞·ªõng d·∫´n.");
    }
  });

  // /kyc_status <email|phone|nickname>
  bot.command("kyc_status", async (ctx) => {
    const args = (ctx.message?.text || "").split(" ").slice(1);
    const q = (args[0] || "").trim();
    if (!q) {
      return ctx.reply(
        "C√°ch d√πng:\n/kyc_status <email|s·ªë ƒëi·ªán tho·∫°i|nickname>"
      );
    }

    try {
      const u = await findUserByQuery(q);
      if (!u) return ctx.reply("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ph√π h·ª£p.");

      const msg = fmtUser(u);
      await ctx.reply(msg, {
        parse_mode: "HTML",
        disable_web_page_preview: true,
      });

      const frontUrl = normalizeImageUrl(toPosix(u?.cccdImages?.front || ""));
      const backUrl = normalizeImageUrl(toPosix(u?.cccdImages?.back || ""));
      const chatId = ctx.chat?.id;

      if (frontUrl) {
        try {
          await sendPhotoSafely(ctx.telegram, chatId, frontUrl);
        } catch (e) {
          console.error("send front image failed:", e?.message);
          await ctx.reply("‚ö†Ô∏è Kh√¥ng g·ª≠i ƒë∆∞·ª£c ·∫£nh CCCD m·∫∑t tr∆∞·ªõc.");
        }
      }
      if (backUrl) {
        try {
          await sendPhotoSafely(ctx.telegram, chatId, backUrl);
        } catch (e) {
          console.error("send back image failed:", e?.message);
          await ctx.reply("‚ö†Ô∏è Kh√¥ng g·ª≠i ƒë∆∞·ª£c ·∫£nh CCCD m·∫∑t sau.");
        }
      }
    } catch (e) {
      console.error("kyc_status error:", e);
      ctx.reply("C√≥ l·ªói x·∫£y ra khi tra c·ª©u.");
    }
  });

  // /kyc_pending [limit]
  bot.command("kyc_pending", async (ctx) => {
    const args = (ctx.message?.text || "").split(" ").slice(1);
    const limit = Math.min(
      Math.max(parseInt(args[0] || "20", 10) || 20, 1),
      50
    );

    try {
      const list = await User.find({ cccdStatus: "pending" })
        .sort({ updatedAt: -1 })
        .limit(limit)
        .lean();

      if (!list.length) return ctx.reply("Hi·ªán kh√¥ng c√≥ KYC ƒëang ch·ªù duy·ªát.");

      const lines = list.map(
        (u, i) =>
          `${i + 1}. ${u?.name || "‚Äî"}${
            u?.nickname ? ` (@${u.nickname})` : ""
          } ‚Äî ${u?.phone || u?.email || ""}`
      );

      const header = `üìù Danh s√°ch KYC ƒëang ch·ªù (${list.length}):\n`;
      let msg = header + lines.join("\n");

      // Telegram message limit ~4096 chars ‚Üí t√°ch n·∫øu d√†i
      if (msg.length > 3900) {
        await ctx.reply(header);
        for (const u of list) {
          await ctx.reply(fmtUser(u), {
            parse_mode: "HTML",
            disable_web_page_preview: true,
          });
        }
      } else {
        await ctx.reply(msg);
      }
    } catch (e) {
      console.error("kyc_pending error:", e);
      ctx.reply("C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch.");
    }
  });

  bot.launch().then(() => {
    console.log("[kycBot] Bot started (polling).");
  });

  process.once("SIGINT", () => bot.stop("SIGINT"));
  process.once("SIGTERM", () => bot.stop("SIGTERM"));
  return bot;
}
